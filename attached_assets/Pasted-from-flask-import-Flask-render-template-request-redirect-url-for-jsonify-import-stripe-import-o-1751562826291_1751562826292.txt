from flask import Flask, render_template, request, redirect, url_for, jsonify import stripe import os app = Flask(__name__) # Replace with your actual Stripe secret key stripe.api_key = os.environ.get("STRIPE_SECRET_KEY") stripe_publishable_key = os.environ.get("STRIPE_PUBLISHABLE_KEY") # Dummy data for demonstration email = "test@example.com" current_tier = "free" # Or "premium" member_count = 50 # initial member count PRICE_AFTER_MEMBERS = 100 def calculate_pricing(member_count): is_founding_member = member_count < PRICE_AFTER_MEMBERS original_price = "Â£9.97" discount_text = "ðŸš€ FOUNDING MEMBERS: 50% OFF FOREVER" if is_founding_member: display_price = "Â£4.97" else: display_price = "Â£9.97" return { "is_founding_member": is_founding_member, "original_price": original_price, "display_price": display_price, "discount_text": discount_text, } @app.route('/') def index(): pricing = calculate_pricing(member_count) users_until_price_change = max(0, PRICE_AFTER_MEMBERS - member_count) return render_template('plans.html', stripe_publishable_key=stripe_publishable_key, email=email, current_tier=current_tier, pricing=pricing, users_until_price_change=users_until_price_change) @app.route('/dashboard') def dashboard(): email = request.args.get('email') return f"Dashboard for {email}" @app.route('/downgrade', methods=['POST']) def downgrade(): email = request.form['email'] # Add logic to handle downgrading the user's subscription return f"Downgraded {email} to free plan" @app.route('/cancel-subscription', methods=['POST']) def cancel_subscription(): # Add logic to handle cancelling the user's subscription return "Subscription cancelled" @app.route('/delete-account', methods=['POST']) def delete_account(): # Add logic to handle deleting the user's account return "Account deleted" @app.route('/create-checkout-session', methods=['POST']) def create_checkout_session(): email = request.form['email'] try: # Create a new Checkout Session for the subscription session = stripe.checkout.Session.create( payment_method_types=['card'], line_items=[{ 'price_data': { 'currency': 'gbp', 'product_data': { 'name': 'AI Fitness Companion - Premium (Founding Member)', 'description': 'Unlimited AI insights, meal plans, and advanced analytics - 50% off forever!' }, 'unit_amount': 497, # Â£4.97 }, 'quantity': 1, }], mode='subscription', success_url=url_for('dashboard', email=email, _external=True) + '?session_id={CHECKOUT_SESSION_ID}', cancel_url=url_for('index', _external=True), ) return jsonify({'id': session.id}) except Exception as e: return jsonify({'error': str(e)}), 400 if __name__ == '__main__': app.run(debug=True) ``` ```html
